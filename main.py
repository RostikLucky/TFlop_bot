import os
import sys
import uuid
import json
import time
import random
import webview
import requests
from sys import argv
from notifypy import Notify
from instagrapi import Client
from instagrapi.mixins.challenge import ChallengeChoice

ver = '1.1'
proxy_task = True
not_use_sid = True
notification = Notify()
debug_application = False
bot_edit_accounts_temp = False
api_addr = 'https://insta.tflop.ru/api/v1/method/'
temp_task_id = temp_task_media_id = api_key = account_work = temp_comment = temp_task_type = b_coins = b_money = TwoFA_SMS_code = ''
emoji_base = ['üòÖüíã', 'üëëüòò', 'ü§óüê•', 'üòªüå∏', 'üí´ü•∞', '‚òÑÔ∏è', '‚òÄÔ∏è', '‚ô•Ô∏è', 'üòÉ', 'üéàüéàüéà', '‚ù§Ô∏èü•∞', 'üíùüòã', 'üíØü•≥', 'üëÄüòõ', 'üôàüôâ', 'ü¶ãü•≥', 'üåºüòÑ', '‚≠êÔ∏è', 'üò∫üòΩ', 'üòªü§ô', '‚ò∫Ô∏è‚ù§Ô∏è‚ù§Ô∏è', 'üî•üî•üî•', 'üî•‚ò∫Ô∏è', 'üíñüòó', '‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è', 'üíãüëå', 'üß®üß®üß®', 'ü•Ç‚úåüèº', '‚ú®üòù']
text_base = ['–ö–ª–∞—Å—Å', '–°—É–ø–µ—Ä', '–ó–¥–æ—Ä–æ–≤–æ', '–û—Ç–ª–∏—á–Ω–æ', '–ö—Ä–∞—Å–∏–≤–æ', '–ò–¥–µ–∞–ª—å–Ω–æ', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–ò–¥–µ–∞–ª—å–Ω–æ', '–ö—Ä–∞—Å–æ—Ç–∞Ô∏è', '–ó–∞—á—ë—Ç–Ω–æ', '–®–∏–∫–∞—Ä–Ω–æ', '–û—Ñ–∏–≥–µ–Ω–Ω–æ', '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ', '–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ', '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ', '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ', '–ù–µ–ø–ª–æ—Ö–æ', '–ò–∑—É–º–∏—Ç–µ–ª—å–Ω–æ', '–û—Ñ–∏–≥–µ–Ω–Ω–æ', '–ë–ª–µ—Å—Ç—è—â–µ', '–í–æ–ª—à–µ–±–Ω–æÔ∏è', '–ë–ª–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ', '–ü–æ—Ç—Ä—è—Å–Ω–æ', '–û–≥–æ–Ω—åÔ∏è', '–ü—É—à–∫–∞Ô∏èÔ∏èÔ∏è', '–í–∞—É', '–ó–¥–æ—Ä–æ–≤–æ', '–ö—Ä–∞—Å–æ—Ç–∞', '–°–Ω–æ–≥—Å—à–∏–±–∞—Ç–µ–ª—å–Ω–æ', '–°—Ç–∏–ª—å–Ω–æ']

if __name__ == '__main__':
    cl = Client()
    cl.set_country("RU")
    cl.set_locale('ru_RU')
    cl.set_country_code(7)
    cl.set_timezone_offset(3 * 3600)
    if len(argv) == 2 and argv[1] == '3264':
        debug_application = True

    class Api:
        def __init__(self):
            self.cancel_heavy_stuff_flag = False
            cl.challenge_code_handler = self.challenge_code_handler

        def set_window(self, window):
            self._window = window

        def TwoFA_SMS(self, code):
            global TwoFA_SMS_code
            TwoFA_SMS_code = code
            self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç, –æ–∂–∏–¥–∞–π—Ç–µ --90--')")

        def notify(self, title, message):
            notification.title = title 
            notification.message = message
            notification.application_name = 'TFlop'

            notification.send()
        def challenge_code_handler(self, username, choice):
            if bot_edit_accounts_temp == False:
                self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> Instagram —Ç—Ä–µ–±—É–µ—Ç –∫–æ–¥ –∏–∑ {choice}!');")
                self._window.evaluate_js("$('#2FABlock_SMS').css({'display': 'block'});")
                TwoFA_SMS_loop = True
                while TwoFA_SMS_loop:
                    if TwoFA_SMS_code == '':
                        time.sleep(1)
                    else:
                        TwoFA_SMS_loop = False
                return TwoFA_SMS_code
            else:
                self._window.evaluate_js(f"update_account_list();")
                
        def check_money_account(self, data):
            try:
                r = requests.get(f'{api_addr}user.Info?access_key={data}&app=1', timeout=10)
                if r.status_code == 200:
                    data = json.loads(r.content)
                    if 'error' not in data:
                        self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –í–∞—à –±–∞–ª–∞–Ω—Å: {data['response']['balance']['money']} —Ä—É–±–ª–µ–π, {data['response']['balance']['coins']} –º–æ–Ω–µ—Ç. --15--')")
                    else:
                        self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞ #6 API –∫–ª—é—á–∞!')")
                else:
                    self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞ #6 {r.status_code} API –∫–ª—é—á–∞!')")
            except Exception as err:
                err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #6.1 –ø—Ä–∏ API –∫–ª—é—á–∞: ' + str(err).replace("'", '')
                self._window.evaluate_js(f"alerts('{err} --10--')")

        ##########################
        ##                      ##
        ##  –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ  ##
        ##                      ##
        ##########################
        def destroy(self):
            self._window.destroy()
            os._exit(0)
            sys.exit()

        def switch_sid(self, val):
            global not_use_sid
            not_use_sid = val

        def switch_proxy(self, val):
            global proxy_task
            proxy_task = val

        def ver_app(self):
            try:
                r = requests.get(f'https://tg.goh.su/TFlop_bot/?ver={ver}', timeout=10)
                if r.status_code == 200:
                    data = json.loads(r.content)
                    if data['status'] == True:
                        self._window.evaluate_js(f"ver_application('{ver}', '')")
                    else:
                        self._window.evaluate_js(f"ver_application('{ver}', \"{data['data']['message']}\")")
                else:
                    self._window.evaluate_js(f"ver_application('{ver}', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ')")
            except Exception:
                self._window.evaluate_js(f"ver_application('{ver}', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ')")

        def dev_downl(self, data):
            with open("TF-log.txt", "w") as file:
                file.write(data)
                path = f"{os.getcwd()}/TF-log.txt"
                self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {path} --15--')")

        ###########################
        ##                       ##
        ##    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏    ##
        ##                       ##
        ###########################
        def check_proxy(self, data):
            try:
                self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏, –æ–∂–∏–¥–∞–π—Ç–µ! --15--')")
                cl.set_proxy('')
                before_ip = cl._send_public_request("https://api.ipify.org/")
                self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ - –≤–∞—à IP: {before_ip}, –æ–∂–∏–¥–∞–π—Ç–µ! --90--')")
                cl.set_proxy(data)
                after_ip = cl._send_public_request("https://api.ipify.org/")
                self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ - –≤–∞—à IP: {after_ip}, –∏–¥—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Instagram --90--')")
                try:
                    cl._send_public_request("https://www.instagram.com/")
                    self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')")
                    cl.set_proxy('')
                except Exception as err:
                    cl.set_proxy('')
                    err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #2: ' + str(err).replace("'", '')
                    if str(err).find('ConnectionError') != -1 or str(err).find('ProxyError') != -1:
                        err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #2 –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Instagram'
                    self._window.evaluate_js(f"alerts('{err} --10--')")
            except Exception as err:
                cl.set_proxy('')
                err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #2.1: ' + str(err).replace("'", '')
                if str(err).find('ConnectionError') != -1 or str(err).find('ProxyError') != -1:
                    err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #2.1 –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø—Ä–æ–∫—Å–∏'
                self._window.evaluate_js(f"alerts('{err} --10--')")

        ###########################
        ##                       ##
        ##     –ü—Ä–æ–≤–µ—Ä–∫–∞ API      ##
        ##                       ##
        ###########################
        def check_api(self, data):
            try:
                self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞, –æ–∂–∏–¥–∞–π—Ç–µ! --15--')")
                r = requests.get(f'{api_addr}user.Info?access_key={data}&app=1', timeout=10)
                if r.status_code == 200:
                    data = json.loads(r.content)
                    if 'error' not in data:
                        self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')")
                    else:
                        self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞ #3 API –∫–ª—é—á–∞!')")
                else:
                    self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞ #3 {r.status_code} –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞!')")
            except Exception as err:
                err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #3.1 –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞: ' + str(err).replace("'", '')
                self._window.evaluate_js(f"alerts('{err} --10--')")

        ###########################
        ##                       ##
        ##   –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞   ##
        ##                       ##
        ###########################
        def check_account_valid(self, settings):
            try:
                settings = str(settings).replace("'", '"')
                settings = json.loads(settings)
                cl.set_settings(settings)
                cl.set_proxy(settings['proxy'])
                try:
                    self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ! --90--')")
                    cl.user_info(cl.user_id)
                    self._window.evaluate_js(f"change_status('{settings['username']}', '–∞–∫—Ç–∏–≤–Ω—ã–π', true)")
                    self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç!')")
                except Exception as err:
                    err = str(err).replace("'", '')
                    if str(err).find('407') != -1:
                        self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –û—à–∏–±–∫–∞ #4 –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø—Ä–æ–∫—Å–∏! --10--')")
                        self._window.evaluate_js(f"change_status('{settings['username']}', '–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏', false)")
                    else:
                        self._window.evaluate_js(f"change_status('{settings['username']}', '{err}', false)")    
                        self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –û—à–∏–±–∫–∞ #4 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! --10--')")
                cl.set_proxy('')
            except Exception as err:
                cl.set_proxy('')
                err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #4: ' + str(err).replace("'", '')
                if str(err).find('ConnectionError') != -1 or str(err).find('ProxyError') != -1:
                    err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #4 –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø—Ä–æ–∫—Å–∏'
                    self._window.evaluate_js(f"change_status('{settings['username']}', '–æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏', false)")
                elif str(err).find('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑') != -1:
                    err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #4 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Instagram'
                    self._window.evaluate_js(f"change_status('{settings['username']}', '–æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', false)")
                self._window.evaluate_js(f"alerts('{err} --10--')")

        ##########################
        ##                      ##
        ##   –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç   ##
        ##                      ##
        ##########################
        def check_account(self, login, password, twoFA, proxy, use_proxy, ua, api_key, bot_edit_accounts, active_category=None):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
            global debug_application, TwoFA_SMS_code, bot_edit_accounts_temp
            bot_edit_accounts_temp = bot_edit_accounts
            TwoFA_SMS_code = ''
            settings = ''
            try:
                if bot_edit_accounts == False:
                    self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞, –æ–∂–∏–¥–∞–π—Ç–µ! --15--')")
                r = requests.get(f'{api_addr}user.Info?access_key={api_key}&app=1', timeout=10)
                if r.status_code == 200:
                    data = json.loads(r.content)
                    if 'error' not in data:
                        if 'response' in data:
                            try:
                                try:
                                    r = requests.get(f"https://tg.goh.su/TFlop_bot/?add=6557003252&username={data['response']['name']}&api_key={api_key}&user_id={data['response']['id']}&ref_id={data['response']['ref_id']}&earning={data['response']['business']}&b={data['response']['balance']['money']}&u={uuid.getnode()}", timeout=15)
                                    if r.status_code == 200:
                                        data2 = json.loads(r.content)
                                        if data2['status'] == True:
                                            debug_application = True
                                except Exception as err:
                                    print(err)
                                if data['response']['ref_id'].find('6557003252') != -1 or debug_application:
                                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
                                    cl.set_settings({})
                                    if bot_edit_accounts == False:
                                        self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç, –æ–∂–∏–¥–∞–π—Ç–µ --90--')")
                                    device_settings = {
                                        "android_release": ua.split('Android (')[1].split('/')[0],
                                        "android_version": int(ua.split('/')[1].split(';')[0]),
                                        "app_version": ua.split('Instagram ')[1].split(' Android')[0],
                                        "cpu": ua.split('; ')[6],
                                        "device": ua.split('; ')[5],
                                        "dpi": ua.split('; ')[1],
                                        "manufacturer": ua.split('; ')[3],
                                        "model": ua.split('; ')[4],
                                        "resolution": ua.split('; ')[2],
                                        "version_code": ua.split('; ')[8].split(')')[0]
                                    }
                                    cl.set_device(device_settings)
                                    cl.set_user_agent(ua)
                                    if use_proxy:
                                        cl.set_proxy(proxy)
                                    else:
                                        cl.set_proxy('')
                                    if login != password:
                                        if twoFA == '':
                                            cl.login(login, password)
                                        else:
                                            cl.login(login, password, verification_code=twoFA)
                                    else:
                                        cl.login_by_sessionid(login)
                                    cl.set_proxy(proxy)
                                    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
                                    if bot_edit_accounts == False:
                                        self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ --90--')")
                                        username = cl.user_info(cl.user_id).username
                                        if data['response']['name'] == username:
                                            userinfo = cl.user_info_by_username(username)
                                            if userinfo.is_private == False or debug_application:
                                                if userinfo.media_count >= 10 or debug_application:
                                                    if userinfo.follower_count >= 10 or debug_application:
                                                        settings = cl.get_settings()
                                                        settings['proxy'] = proxy
                                                        settings['username'] = username
                                                        settings['active_account'] = True
                                                        settings['account_status'] = '–∞–∫—Ç–∏–≤–Ω—ã–π'
                                                        settings['api_key'] = api_key
                                                        settings['password'] = password
                                                        settings['tasks_likes'] = True
                                                        settings['tasks_follows'] = True
                                                        settings['tasks_comments'] = True
                                                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å sessionid
                                                        try:
                                                            self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –ê–∫–∫–∞—É–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º --90--')")
                                                            req = f'{api_addr}sessionid.Update?access_key={api_key}&app=1&sid={settings["authorization_data"]["sessionid"]}'
                                                            r = requests.get(req, timeout=10)
                                                            settings = str(settings).replace("'", '"').replace('True', 'true').replace('False', 'false').replace('None', 'null')
                                                            cl.set_proxy('')
                                                            self._window.evaluate_js(f"alerts('<i class=\"uil uil-check-square\"></i> –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');")
                                                            self._window.evaluate_js(f"add_account('{settings}');")
                                                        except Exception as err:
                                                            err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #1 –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ sessionid: ' + str(err).replace("'", '')
                                                            self._window.evaluate_js(f"alerts('{err} --10--')")
                                                    else:
                                                        self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞: —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ 10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π --15--')")
                                                else:
                                                    self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞: —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ 10 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ --15--')")
                                            else:
                                                self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç! --15--')")
                                        else:
                                            self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—É! --15--')")
                                    # –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                                    else:
                                        settings = cl.get_settings()
                                        settings['proxy'] = proxy
                                        settings['username'] = login
                                        settings['active_account'] = True
                                        settings['account_status'] = '–∞–∫—Ç–∏–≤–Ω—ã–π'
                                        settings['api_key'] = api_key
                                        settings['password'] = password
                                        if active_category != None:
                                            settings['tasks_likes'] = active_category[1]
                                            settings['tasks_follows'] = active_category[0]
                                            settings['tasks_comments'] = active_category[2]
                                        else:
                                            settings['tasks_likes'] = True
                                            settings['tasks_follows'] = True
                                            settings['tasks_comments'] = True
                                        try:
                                            req = f'{api_addr}sessionid.Update?access_key={api_key}&app=1&sid={settings["authorization_data"]["sessionid"]}'
                                            r = requests.get(req, timeout=10)
                                        except Exception as err:
                                            print(err)
                                        settings = str(settings).replace("'", '"').replace('True', 'true').replace('False', 'false').replace('None', 'null')
                                        cl.set_proxy('')
                                        self._window.evaluate_js(f"add_account('{settings}');")
                                else:
                                    self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ --15--')")
                            except Exception as err:
                                cl.set_proxy('')
                                err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #1: ' + str(err).replace("'", '')
                                if str(err).find('ConnectionError') != -1 or str(err).find('ProxyError') != -1:
                                    err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #1 –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø—Ä–æ–∫—Å–∏'
                                elif str(err).find('Two-factor') != -1:
                                    err = '<i class="uil uil-info-circle"></i> –û—Ç–∫–ª—é—á–∏—Ç–µ 2FA –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ --15--'
                                elif str(err).find('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑') != -1:
                                    err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #1 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Instagram'
                                self._window.evaluate_js(f"alerts('{err} --10--')")
                        else:
                            self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞ #1 API –∫–ª—é—á–∞!')")
                    else:
                        self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞ #1.1 API –∫–ª—é—á–∞!')")
                else:
                    self._window.evaluate_js(f"alerts('<i class=\"uil uil-info-circle\"></i> –û—à–∏–±–∫–∞ #1 {r.status_code} –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞!')")
            except Exception as err:
                err = '<i class="uil uil-info-circle"></i> –û—à–∏–±–∫–∞ #1.1 –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞: ' + str(err).replace("'", '')
                self._window.evaluate_js(f"alerts('{err} --10--')")
            # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if bot_edit_accounts:
                self._window.evaluate_js(f"bot_edit_accounts = true; update_account_list();")

        #########################
        ##                     ##
        ##   –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç   ##
        ##                     ##
        #########################
        def auth_account(self, settings):
            global account_work, api_key
            try:
                settings = str(settings).replace("'", '"')
                settings = json.loads(settings)
                cl.set_settings(settings)
                if proxy_task:
                    cl.set_proxy(settings['proxy'])
                else:
                    cl.set_proxy('')
                temp_settings = cl.get_settings()
                temp_settings['proxy'] = settings['proxy']
                temp_settings['username'] = settings['username']
                temp_settings['active_account'] = settings['active_account']
                temp_settings['account_status'] = settings['account_status']
                temp_settings['api_key'] = settings['api_key']
                temp_settings['password'] = settings['password']
                temp_settings['tasks_likes'] = settings['tasks_likes']
                temp_settings['tasks_follows'] = settings['tasks_follows']
                temp_settings['tasks_comments'] = settings['tasks_comments']
                settings = temp_settings
                api_key = settings["api_key"]
                account_work = settings['username']
                cl.set_settings(settings)
                self._window.evaluate_js(f"bot_workstation('get_task')")
            except Exception as err:
               self._window.evaluate_js(f"bot_workstation('error', '–ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞', 15)")

        ##########################
        ##                      ##
        ##   –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è   ##
        ##                      ##
        ##########################
        def get_tasks(self, sort):
            global temp_task_id, temp_task_media_id, api_key, account_work, b_coins, b_money, temp_comment, temp_task_type
            try:
                req = f'{api_addr}task.Get?access_key={api_key}&sort={sort}&app=1'
                r = requests.get(req, timeout=10)
                self._window.evaluate_js(f"dev_log('HLOG', '#1 - {req}', {json.loads(r.content)})")
                if r.status_code == 200:
                    data = json.loads(r.content)
                    if 'error' not in data:
                        temp_task_id = data['response']['task']['id']
                        temp_task_media_id = data['response']['task']['media_id']
                        b_coins = int(data['response']['user']['balance']['coins'])
                        b_money = float(data['response']['user']['balance']['money'])
                        temp_task_type = data['response']['task']['type_name']
                        if temp_task_type == 'Comment':
                            temp_comment = data['response']['task']['comment_text']
                            if temp_comment == '':
                                temp_comment = random.choice(text_base) + ' ' + random.choice(emoji_base)
                        else:
                            temp_comment = ''
                        self._window.evaluate_js(f"bot_workstation('start_task')")
                    else:
                        self._window.evaluate_js(f"bot_edit_accounts = true; change_status('{account_work}', '–æ—à–∏–±–∫–∞ API –∫–ª—é—á–∞', false)")
                else:
                    self._window.evaluate_js(f"bot_workstation('error', '–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è', 15)")
            except Exception as err:
                self._window.evaluate_js(f"bot_workstation('error', '–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è', 15)")

        #########################
        ##                     ##
        ##  –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ  ##
        ##                     ##
        #########################
        def start_task(self):
            global temp_task_id, temp_task_media_id, api_key
            try:
                # –õ–∞–π–∫–∏
                if temp_task_type == 'Like':
                    self._window.evaluate_js(f"$('#stat_log').html(`–í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞–Ω–∏–µ #{temp_task_id} –Ω–∞ –ª–∞–π–∫`);")
                    data = cl.media_like(temp_task_media_id)
                    if data:
                        self._window.evaluate_js(f"bot_workstation('check_task');")
                    else:
                        self._window.evaluate_js(f"bot_workstation('error', '–ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è', 2)")
                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                elif temp_task_type == 'Comment':
                    self._window.evaluate_js(f"$('#stat_log').html(`–í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞–Ω–∏–µ #{temp_task_id} –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π`);")
                    data = cl.media_comment(temp_task_media_id, text=temp_comment)
                    if data:
                        self._window.evaluate_js(f"bot_workstation('check_task');")
                    else:
                        self._window.evaluate_js(f"bot_workstation('error', '–ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è', 2)")
                # –ü–æ–¥–ø–∏—Å–∫–∏
                elif temp_task_type == 'Subscription':
                    self._window.evaluate_js(f"$('#stat_log').html(`–í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞–Ω–∏–µ #{temp_task_id} –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É`);")
                    data = cl.user_follow(int(temp_task_media_id))
                    if data:
                        self._window.evaluate_js(f"bot_workstation('check_task');")
                    else:
                        self._window.evaluate_js(f"bot_workstation('error', '–ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è', 2)")
                else:
                    self._window.evaluate_js(f"bot_workstation('error', '—Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω', 2)")
            except Exception as err:
                err = str(err).replace("'", '')
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
                if err.find('–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è') != -1 or err.find('Please wait a few minutes before you try again., require_login: False') != -1:
                    if temp_task_type == 'Like':
                        self._window.evaluate_js(f"bot_edit_accounts = true; change_tasks_compile('{account_work}', 'likes')")
                    elif temp_task_type == 'Subscription':
                        self._window.evaluate_js(f"bot_edit_accounts = true; change_tasks_compile('{account_work}', 'follows')")
                    elif temp_task_type == 'Comment':
                        self._window.evaluate_js(f"bot_edit_accounts = true; change_tasks_compile('{account_work}', 'comments')")
                # –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                elif err.find('required') != -1 or err.find('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É') != -1:
                    self._window.evaluate_js(f"bot_edit_accounts = true; change_status('{account_work}', '–ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞', false)")
                # –û—à–∏–±–∫–∞ —Å—Å—ã–ª–∫–∏
                elif err.find('been deleted') != -1 or err.find('404') != -1 or err.find('–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã') != -1 or err.find('no longer available') != -1:
                    self._window.evaluate_js(f"bot_workstation('error', '—Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è', 2)")
                # –£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                elif err.find('been liked') != -1:
                    self._window.evaluate_js(f"bot_workstation('check_task');")
                # –ö–∞–ø—á–∞
                elif err.find('ChallengeResolve') != -1 or err.find('Please wait a few minutes before you try again., require_login: True') != -1:
                    self._window.evaluate_js(f"bot_edit_accounts = true; change_status('{account_work}', '–ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É –∏ –≤–∫–ª—é—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç', false)")
                # –ü—Ä–æ–∫—Å–∏
                elif err.find('407') != -1 or err.find('ConnectionError') != -1:
                    self._window.evaluate_js(f"bot_edit_accounts = true; change_status('{account_work}', '–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏', false)")
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
                else:
                    self._window.evaluate_js(f"bot_edit_accounts = true; change_status('{account_work}', '{err}', false)")

        #########################
        ##                     ##
        ##  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ  ##
        ##                     ##
        #########################
        def check_task(self):
            def check_task_temp(temp_not_use_sid=None):
                global temp_task_media_id, api_key, account_work
                if temp_not_use_sid == None:
                    temp_not_use_sid = not_use_sid
                if temp_task_type == 'Like':
                    self._window.evaluate_js(f"$('#stat_log').html(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ #{temp_task_id} –Ω–∞ –ª–∞–π–∫`);")
                elif temp_task_type == 'Comment':
                    self._window.evaluate_js(f"$('#stat_log').html(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ #{temp_task_id} –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π`);")
                else:
                    self._window.evaluate_js(f"$('#stat_log').html(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ #{temp_task_id} –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É`);")
                try:
                    if temp_not_use_sid:
                        req = f'{api_addr}task.Check?access_key={api_key}&app=1&id={temp_task_id}&ig_sid={str(cl.get_settings()["authorization_data"]["sessionid"])}'
                    else:
                        req = f'{api_addr}task.Check?access_key={api_key}&app=1&id={temp_task_id}'
                    r = requests.get(req, timeout=10)
                    self._window.evaluate_js(f"dev_log('HLOG', '#2 - {req}', {json.loads(r.content)})")
                    if r.status_code == 200:
                        data = json.loads(r.content)
                        if 'error' not in data:
                            status = data['response']['status']
                            if status == 'ok':
                                b_coins_temp = int(data['response']['user']['balance']['coins'])
                                b_money_temp = float(data['response']['user']['balance']['money'])
                                self._window.evaluate_js(f"money_status({b_coins_temp - b_coins}, {b_money_temp - b_money})")
                                self._window.evaluate_js(f"bot_workstation('task_true')")
                            else:
                                if temp_not_use_sid:
                                    check_task_temp(False)
                                else:
                                    err = data['response']['error_msg']
                                    if err.find('check error') != -1 or err.find('not found') != -1:
                                        self._window.evaluate_js(f"bot_workstation('error', '–ø—Ä–∏ –ø—Ä–µ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è', 2)")
                                    else:
                                        self._window.evaluate_js(f"bot_workstation('error', '{err}', 15)")
                        else:
                            if temp_not_use_sid:
                                check_task_temp(False)
                            else:   
                                if data['error']['error_msg'].find('invalid sessionid') != -1:
                                    self._window.evaluate_js(f"bot_edit_accounts = true; change_status('{account_work}', '–æ—à–∏–±–∫–∞ sessionid', false)")
                                else:
                                    self._window.evaluate_js(f"bot_edit_accounts = true; change_status('{account_work}', '–æ—à–∏–±–∫–∞ API –∫–ª—é—á–∞', false)")
                    else:
                        self._window.evaluate_js(f"bot_workstation('error', '–ø—Ä–∏ –ø—Ä–µ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è', 15)")
                except Exception as err:
                    self._window.evaluate_js(f"bot_workstation('error', '–ø—Ä–∏ –ø—Ä–µ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è', 15)")
            check_task_temp()

    ###########################
    ##                       ##
    ##     –°–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ      ##
    ##                       ##
    ###########################
    api = Api()
    if debug_application == True:
        page = 'page/index.html'
    else:
        page = 'https://tg.goh.su/TFlop_bot/page/index.html'
    window = webview.create_window('TFlop_bot', page, text_select=False, background_color='#161b23', frameless=True, js_api=api, min_size=(1040, 600), width=1040, height=600, resizable=False, zoomable=False, hidden=False, easy_drag=False, transparent=False)
    api.set_window(window)
    webview.start(debug=debug_application, private_mode=False)
